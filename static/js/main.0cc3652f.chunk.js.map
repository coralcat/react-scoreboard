{"version":3,"sources":["components/Statistics.js","components/Header.js","components/Counter.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","props","totalPlayers","players","length","totalScore","_","sumBy","className","Header","console","log","title","Counter","onClick","changeScore","id","score","Player","removePlayer","name","AddPlayerForm","state","value","handleValueChange","e","setState","target","handleSubmit","preventDefault","addPlayer","onSubmit","this","type","placeholder","onChange","React","Component","App","handleRemovePlayer","prevState","filter","item","handleChangeScore","delta","forEach","player","handleAddPlayer","maxId","reduce","max","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cc3652f.chunk.js","sourcesContent":["import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nexport const Statistics = (props) => {\r\n    let totalPlayers = props.players.length;\r\n    let totalScore = _.sumBy(props.players, 'score');\r\n\r\n    return (\r\n        <table className=\"stats\">\r\n            <tbody>\r\n            <tr>\r\n                <td>Players:</td>\r\n                <td>{totalPlayers}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Total Points:</td>\r\n                <td>{totalScore}</td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React from 'react';\r\nimport {Statistics} from \"./Statistics\";\r\n\r\nexport const Header = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <header className=\"header\">\r\n            <Statistics players=\"{props.players}\" />\r\n            <h1 className=\"h1\">{props.title}</h1>\r\n        </header>\r\n    );\r\n};","import React from 'react';\r\n\r\nexport const Counter = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"counter\">\r\n            <button className=\"counter-action decrement\" onClick={() => props.changeScore(props.id, -1)}> -\r\n            </button>\r\n            <span className=\"counter-score\">{props.score}</span>\r\n            <button className=\"counter-action increment\" onClick={() => props.changeScore(props.id, 1)}> +\r\n            </button>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Counter} from './Counter';\r\n\r\nexport const Player = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"player\">\r\n            <span className=\"player-name\">\r\n                <button className=\"remove-player\" onClick={() => props.removePlayer(props.id)}>X</button>\r\n            </span>\r\n            <span className=\"player-name\">{props.name}</span>\r\n            <Counter score={props.score} changeScore={props.changeScore} id={props.id} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\n// eslint-disable-next-line no-undef\r\nexport class AddPlayerForm extends React.Component {\r\n    state = {\r\n        value: ''\r\n    };\r\n\r\n    handleValueChange = (e) => {\r\n        this.setState({value: e.target.value});\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addPlayer(this.state.value);\r\n        this.setState({\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                <input className=\"input\" type=\"text\" placeholder=\"enter a player's name\" value={this.state.value}\r\n                       onChange={this.handleValueChange}/>\r\n                <input className=\"input\" type=\"submit\" value=\"Add Player\"/>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {Header} from './components/Header'\nimport {Player} from './components/Player'\nimport {AddPlayerForm} from \"./components/AddPlayerForm\";\n\n\nclass App extends React.Component {\n    state = {\n        players: [\n            {name: 'sori', score: 86, id: 1},\n            {name: 'miki', score: 99, id: 2},\n            {name: 'doro', score: 82, id: 3},\n            {name: 'bori', score: 74, id: 4},\n            {name: 'sanho', score: 33, id: 5},\n        ]\n    };\n\n    handleRemovePlayer = (id) => {\n        console.log(id);\n        this.setState(prevState => {\n            return {\n                players: prevState.players.filter(item => item.id !== id)\n            }\n        })\n    };\n\n    handleChangeScore = (id, delta) => {\n        console.log('changeScore', id, delta);\n        this.setState(prevState => {\n            const players = [...prevState.players];\n            players.forEach(player => {\n                if (player.id === id) {\n                    player.score += delta;\n                }\n            });\n            return {players}\n        })\n    };\n\n    handleAddPlayer = (name) => {\n        this.setState(prevState => {\n            const maxId = prevState.players.reduce((max, player) => {\n                return max > player.id ? max : player.id;\n            }, 0);\n\n            return {\n                players: [ ...prevState.players, {\n                    id: maxId + 1, name, score: 0\n                }]\n            }\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"scoreboard\">\n                <Header title=\"My scoreboard\" players={this.state.players}/>\n\n                {\n                    this.state.players.map(player =>\n                        <Player name={player.name} score={player.score} changeScore={this.handleChangeScore} removePlayer={this.handleRemovePlayer}\n                                key={player.id} id={player.id}/>)\n                }\n                <AddPlayerForm addPlayer={this.handleAddPlayer} />\n            </div>\n        );\n    };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}